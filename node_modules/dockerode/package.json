{
  "name": "dockerode",
  "description": "Docker.io / Docker remote API implementation.",
  "version": "1.2.3",
  "author": {
    "name": "Pedro Dias",
    "email": "petermdias@gmail.com"
  },
  "maintainers": [
    {
      "name": "apocas",
      "email": "petermdias@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/apocas/dockerode.git"
  },
  "keywords": [
    "docker",
    "docker.io"
  ],
  "dependencies": {
    "docker-modem": "0.1.x",
    "ws": "0.4.x"
  },
  "devDependencies": {
    "chai": "~1.7.0",
    "mocha": "~1.12.0"
  },
  "main": "./lib/docker",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha -R spec"
  },
  "engines": {
    "node": ">= 0.8"
  },
  "readme": "# dockerode\n\n[![NPM](https://nodei.co/npm/dockerode.png?downloads=true&stars=true)](https://nodei.co/npm/dockerode/)\n\nNot another Node.js Docker.io Remote API module.\n\nWhy is `dockerode` different from all the Docker node.js module out there:\n\n* **streams** - `dockerode` does NOT break any stream, it passes them to you allowing for some stream voodoo.\n* **stream demux** - Supports optional demultiplexing of the new attach stream system implemented in Remote API v1.6. \n* **entities** - containers and images are defined entities and not random static methods.\n* **run** - `dockerode` allow you to seamless run commands in a container ala `docker run`.\n* **tests** - `dockerode` really aims to have a good test set, allowing to follow `Docker` changes easily, quickly and painlessly.\n* **feature-rich** - ALL `Docker` Remote API features implemented.\n\n\n## installation\n\n`npm install dockerode`\n\n\n## getting started\n\nto use `dockerode` first you need to instantiate it:\n\n``` js\nvar Docker = require('dockerode');\nvar docker = new Docker({socketPath: '/var/run/docker.sock'});\nvar docker2 = new Docker({host: 'http://192.168.1.10', port: 3000});\n//...\n```\n\nManipulating a container:\n\n``` js\nvar container = docker.getContainer('71501a8ab0f8');\n\ncontainer.start(function (err, data) {\n  console.log(data);\n});\n\ncontainer.remove(function (err, data) {\n  console.log(data);\n});\n\n//...\n```\n\nCreating a container:\n``` js\ndocker.createContainer({Image: 'ubuntu', Cmd: ['/bin/bash']}, function(err, container) {\n  container.start(function(err, data) {\n    //...\n  });\n});\n//...\n```\n\nStreams goodness:\n\n``` js\n//tty:true\ncontainer.attach({stream: true, stdout: true, stderr: true, tty: true}, function(err, stream) {\n  stream.pipe(process.stdout);\n});\n\n//tty:false\ncontainer.attach({stream: true, stdout: true, stderr: true, tty: false}, function(err, stream) {\n  //http://docs.docker.io/en/latest/api/docker_remote_api_v1.7/#post--containers-(id)-attach\n  //dockerode may demultiplex the streams for you :)\n  container.modem.demuxStream(stream, process.stdout, process.stderr);\n});\n\ndocker.createImage({fromImage: 'ubuntu'}, function(err, stream) {\n  stream.pipe(process.stdout);\n});\n\n//...\n```\n\nEquivalent of `docker run` in `dockerode`:\n\n* `image` - container image\n* `cmd` - command to be executed\n* `stream` - stream which will be used for execution output.\n* `callback` - callback called when execution ends.\n\n``` js\ndocker.run('ubuntu', ['bash', '-c', 'uname -a'], process.stdout, function(err, data, container) {\n  console.log(data.StatusCode);\n});\n```\n\nEquivalent of `docker pull` in `dockerode`:\n\n* `repoTag` - container image name (optionally with tag)\n  `myrepo/myname:withtag`\n* `opts` - extra options passed to create image see [docker api](http://docs.docker.io/en/latest/api/docker_remote_api_v1.8/#create-an-image)\n* `callback` - callback called when execution ends.\n\n``` js\ndocker.pull('myrepo/myname:tag', function(err, stream) {  \n  // streaming output from pull... \n  // Also see: http://docs.docker.io/en/latest/api/docker_remote_api_v1.8/#create-an-image\n});\n```\n\nCheck the tests for more examples.\n\n## notes\n\n* Input options are directly passed to Docker.io check [Docker Remote API documentation](http://docs.docker.io/en/latest/api/docker_remote_api/) for more details.\n* Return values are unchanged from Docker, official Docker.io documentation will also apply to them.\n\n\n## tests\n\nTests were implemented using `mocha` and `chai` do `npm test` to run them.\n\n## license\n\nPedro Dias <abru.pt>\n\nlicensed under the apache license, version 2.0 (the \"license\");\nyou may not use this file except in compliance with the license.\nyou may obtain a copy of the license at\n\n    http://www.apache.org/licenses/LICENSE-2.0.html\n\nunless required by applicable law or agreed to in writing, software\ndistributed under the license is distributed on an \"as is\" basis,\nwithout warranties or conditions of any kind, either express or implied.\nsee the license for the specific language governing permissions and\nlimitations under the license.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/apocas/dockerode/issues"
  },
  "_id": "dockerode@1.2.3",
  "dist": {
    "shasum": "5411dfab96c6fba1c1fd691d1ce88d97d410f7d4"
  },
  "_from": "dockerode@>= 1.2.0",
  "_resolved": "https://registry.npmjs.org/dockerode/-/dockerode-1.2.3.tgz"
}
